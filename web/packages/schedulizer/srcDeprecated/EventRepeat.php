<?php namespace Concrete\Package\Schedulizer\Src {

    use Loader;

    /**
     * Class SchedulizerEventRepeat
     * @package Concrete\Package\Schedulizer\Src
     * @Entity
     * @Table(name="SchedulizerEventRepeat",indexes={
     *  @Index(name="eventID",columns="eventID"),
     *  @Index(name="repeatWeek",columns="repeatWeek"),
     *  @Index(name="repeatDay",columns="repeatDay"),
     *  @Index(name="repeatWeekday",columns="repeatWeekday")
     * })
     */
    class EventRepeat extends Bin\Persistable {

        use Bin\Traits\Persistable;

        /**
         * @Id @Column(type="integer") @GeneratedValue(strategy="IDENTITY")
         * @var int
         */
        protected $id;

//        /**
//         * Definition is generated by the joincolumn annotation on $eventInstance. Doctrine sucks
//         * so we have to ensure this column definition 100% matches whats inferred by the
//         * joinColumn definition.
//         * @Column(type="integer", length=11)
//         */
//        protected $eventID;

        /**
         * @Column(type="integer", nullable=true, options={"unsigned":true})
         */
        protected $repeatWeek;

        /**
         * @Column(type="integer", nullable=true, options={"unsigned":true})
         */
        protected $repeatDay;

        /**
         * @Column(type="integer", nullable=true, options={"unsigned":true})
         */
        protected $repeatWeekday;

        /**
         * @ManyToOne(targetEntity="Concrete\Package\Schedulizer\Src\Event", inversedBy="eventRepeatSettings")
         * @JoinColumn(name="eventID", referencedColumnName="id", nullable=false)
         */
        protected $eventInstance;

        /**
         * Setup for two-way association with Doctrine so the EventRepeat can be
         * aware of the event its bound to (which is how $eventID gets determined!)
         * @param Event $event
         */
        public function setEventInstance( Event $event ){
            $this->eventInstance = $event;
        }

        /**
         * Allow passing in an array to set properties on instantiation
         * @param array $setters
         */
        public function __construct( $setters = array() ){
            $this->setPropertiesFromArray($setters);
        }

//        public static function purgeByID( $id ){
//            Loader::db()->Execute("DELETE FROM SchedulizerEventRepeat WHERE eventID = ?", array($id));
//        }

        /**
         * Return properties for JSON serialization
         * @return array|mixed
         */
        public function jsonSerialize(){
            $properties = (object) get_object_vars($this);
            unset($properties->eventInstance);
            return $properties;
        }

    }

}